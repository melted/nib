a & b = b

print a = _prim_string_print (_prim_to_string a) & _prim_string_print "\n"

_ = print 1
_ = print true
c = _prim_add 1 2
_ = print c
b = print "hello"

ch = 'a'
_ = print ch

// Ok, let's be systematic
// Operators
a + b = _prim_add a b
a * b = _prim_mul a b
a - b = _prim_sub a b
a / b = _prim_div a b

mod a b = _prim_mod a b

// using an identifier as operator
_ = print (7 `mod` 3)

// Function
inc x = x + 1

// Vararg
mkarr ...xs = xs

// Use
_ = print (mkarr 1 2 3 4 5)
ft = 2.9 + 1.0
_ = print ft
_ = print (inc 4)

//Projection
_ = print (nil_type.name)

// Recursion
fac 0 = 1
fac x = x * fac (x - 1)

_ = print (fac 4)

// Where
i = a + b where a=12;b=13

_ = print i

fib n = go 1 1 n
            where
                go _ b 0 = b
                go a b n = go b (a+b) (n-1)

_ = print (fib 5)

// Arrays
arr = [1,2,3,4,5]
x = _prim_array_ref arr 2
_ = _prim_array_set arr 2 (x+19)
_ = print arr

array.set = _prim_array_set
array.ref = _prim_array_ref

arr2 = _prim_array_create 100
_ = print (_prim_array_size arr2)


// Type
_ = print string.type_id

_ = _prim_string_print (type "hello").type_id


_ = _prim_string_print (_prim_to_string 1.3)

// Bytearrays

// Tables

// Lambdas

// Guards

a < b = _prim_lt a b

size x | x < 5 = "XS"
size x | x < 10 = "S"
size x | x < 15 = "M"
size x | x < 20 = "L"
size x = "XL"

_ = print (size 11)

// module

module mod
abba = "hello"
baab = "world"

module global
z = 9876
_ = print mod.abba

res = _prim_load "nib-core/testdata/littler.nib"

_ = print res
_ = print thing

// Custom Pattern

_ = print "end"