// The default library for Nib

module global

/// Add two numbers
a + b = _prim_add a b

/// Subtract b from a
a - b = _prim_sub a b

/// Multiply two numbers
a * b = _prim_mul a b

/// Divide a by b
a / b = _prim_div a b
mod a b = _prim_mod a b

a > b = _prim_gt a b
a >= b = _prim_gte a b
a < b = _prim_lt a b
a <= b = _prim_lte a b

a == b = _prim_eq a b
a != b = not (a == b)

not true = false
not false = true

// bitops
bit_and = _prim_bitand
bit_or = _prim_bitor
bit_xor = _prim_bitxor
bit_not = _prim_bitnot
bit_shift = _prim_bitshift

// some arithmetic
max x y = x > y => x; y
min x y = x < y => x; y

// logic
x || y = x => x; y ()
x && y = x => y (); false

// convenience
on x f = f x
id x = x
a & b = b // sequencing
const a b = a
apply = _prim_apply

// types
type = _prim_type
type_name v = (type v).type_id
set_type = _prim_type_set


// IO
print a = _prim_string_print (_prim_to_string a)
println a =  print a & print "\n"

// Stuff that need prims
// =====================
// apply
// +, -, *, /, mod (at least type specific ones, maybe can do generic as lib)
// <, >, <=, >=, == - check
// sin, cos, tan, asin, acos, atan
// and, or, xor, lsh, rsh, (bit logic)
// type, set_type
// array (ref, set, new, size) - check
// bytearray (ref, set, new, size, 8-64bit ops signed unsigned) 
// symbol (new, new_well_known)
// table (create, ref, set, size)
// char (ord, chr, char array from/to bytes)
// ptr (peek, poke, offset) -- can wait
// IO (print, println, put_char, get_char. stdin. stderr, stdout, filehandling(file_open, file_close)) 
// Debug
//
// Stuff that doesn't need primitives
// ==================================
//
//
//
